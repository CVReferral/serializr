{
  "_args": [
    [
      {
        "raw": "serializr@https://github.com/geekupvn/serializr.git",
        "scope": null,
        "escapedName": "serializr",
        "name": "serializr",
        "rawSpec": "https://github.com/geekupvn/serializr.git",
        "spec": "git+https://github.com/geekupvn/serializr.git",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:geekupvn/serializr.git",
          "sshUrl": "git+ssh://git@github.com/geekupvn/serializr.git",
          "httpsUrl": "git+https://github.com/geekupvn/serializr.git",
          "gitUrl": "git://github.com/geekupvn/serializr.git",
          "shortcut": "github:geekupvn/serializr",
          "directUrl": "https://raw.githubusercontent.com/geekupvn/serializr/master/package.json"
        }
      },
      "/opt/magneto/app.recruiter/packages/app.recruiter"
    ]
  ],
  "_from": "git+https://github.com/geekupvn/serializr.git",
  "_id": "serializr@1.1.10",
  "_inCache": true,
  "_location": "/serializr",
  "_phantomChildren": {},
  "_requested": {
    "raw": "serializr@https://github.com/geekupvn/serializr.git",
    "scope": null,
    "escapedName": "serializr",
    "name": "serializr",
    "rawSpec": "https://github.com/geekupvn/serializr.git",
    "spec": "git+https://github.com/geekupvn/serializr.git",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:geekupvn/serializr.git",
      "sshUrl": "git+ssh://git@github.com/geekupvn/serializr.git",
      "httpsUrl": "git+https://github.com/geekupvn/serializr.git",
      "gitUrl": "git://github.com/geekupvn/serializr.git",
      "shortcut": "github:geekupvn/serializr",
      "directUrl": "https://raw.githubusercontent.com/geekupvn/serializr/master/package.json"
    }
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "git+https://github.com/geekupvn/serializr.git#b0e9e7feb53553eb3b5ff0c4e4dd9919243aaeae",
  "_shasum": "33369caf51373efc609ec316aa1ecfcc8ee5e4dc",
  "_shrinkwrap": null,
  "_spec": "serializr@https://github.com/geekupvn/serializr.git",
  "_where": "/opt/magneto/app.recruiter/packages/app.recruiter",
  "author": {
    "name": "Michel Weststrate"
  },
  "bugs": {
    "url": "https://github.com/mobxjs/serializr/issues"
  },
  "dependencies": {},
  "description": "Serialize and deserialize complex object graphs to JSON",
  "devDependencies": {
    "babel-cli": "^6.11.4",
    "babel-plugin-transform-decorators-legacy": "^1.3.4",
    "babel-preset-es2015": "^6.9.0",
    "babel-preset-stage-1": "^6.5.0",
    "coveralls": "^2.11.9",
    "documentation": "^4.0.0-beta9",
    "eslint": "^2.12.0",
    "istanbul": "^0.4.4",
    "mobx": "^2.4.1 || ^3.0.0",
    "tape": "^4.5.1",
    "typescript": "^2.1.4",
    "uglify-js": "^2.6.4"
  },
  "files": [
    "serializr.js",
    "serializr.min.js",
    "serializr.min.js.map",
    "serializr.d.ts"
  ],
  "gitHead": "b0e9e7feb53553eb3b5ff0c4e4dd9919243aaeae",
  "homepage": "https://github.com/mobxjs/serializr#readme",
  "keywords": [
    "serialize",
    "deserialize",
    "graph",
    "json",
    "mobx"
  ],
  "license": "MIT",
  "main": "serializr.js",
  "name": "serializr",
  "optionalDependencies": {},
  "readme": "# Serializr\n\n_Serialize and deserialize complex object graphs to JSON_\n\n[![Build Status](https://travis-ci.org/mobxjs/serializr.svg?branch=master)](https://travis-ci.org/mobxjs/serializr)\n[![Coverage Status](https://coveralls.io/repos/github/mobxjs/serializr/badge.svg?branch=master)](https://coveralls.io/github/mobxjs/serializr?branch=master)\n[![Join the chat at https://gitter.im/mobxjs/serializr](https://badges.gitter.im/mobxjs/serializr.svg)](https://gitter.im/mobxjs/serializr?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n# Introduction\n\nSerializr is a utility library that helps converting json structures into complex object graphs and the other way around.\nFor a quick overview, read the [introduction blog post](https://medium.com/@mweststrate/introducing-serializr-serializing-and-deserializing-object-graphs-with-ease-8833c3fcea02#.ha9s8hkjk)\n\nFeatures:\n\n-   (De)serialize objects created with a constructor / class\n-   (De)serialize primitive values\n-   (De)serialize nested objects, maps and arrays\n-   Resolve references asynchronously (during deserialization)\n-   Supports inheritance\n-   Works on any ES5 environment (if ES3 is needed file a feature request)\n-   Convenience decorators for ESNext / Typescript\n-   Ships with typescript / flow typings\n-   Generic solution that works well with for example MobX out of the box\n\nNon-features:\n\n-   Serializr is not an ORM or data management library. It doesn't manage object instances, provided api's like fetch, search etc. If you are building such a thing though, serializr might definitely take care of the serialization part for you :-).\n-   Serializr is not a MobX specific (de)serialization mechanism, it is generic and should fit work with any type of model objects\n\n# Installation\n\nFrom npm: `npm install serializr --save`\n\nFrom CDN: <https://unpkg.com/serializr> which declares the global `serializr` object.\n\n# Quick example:\n\n```javascript\nimport {\n  createModelSchema, primitive, reference, list, object, identifier, serialize, deserialize\n} from \"serializr\";\n\n// Example model classes\nclass User {\n    uuid        = Math.floor(Math.random()*10000);\n    displayName = \"John Doe\";\n}\n\nclass Message {\n    message  = \"Test\";\n    author   = null;\n    comments = [];\n}\n\nfunction fetchUserSomewhere(uuid) {\n    // Lets pretend to actually fetch a user; but not.\n    // In a real app this might be a database query\n    const user       = new User();\n    user.uuid        = uuid;\n    user.displayName = `John Doe ${uuid}`;\n    return user;\n}\n\nfunction findUserById(uuid, callback, context) {\n    // This is a lookup function\n    // identifier is the identifier being resolved\n    // callback is a node style calblack function to be invoked with the found object (as second arg) or an error (first arg)\n    // context is an object detailing the execution context of the serializer now\n    callback(null, fetchUserSomewhere(uuid))\n}\n\n// Create model schemas\ncreateModelSchema(Message, {\n    message : primitive(),\n    author  : reference(User, findUserById),\n    comments: list(object(Message))\n});\n\ncreateModelSchema(User, {\n    uuid       : identifier(),\n    displayName: primitive()\n});\n\n// can now deserialize and serialize!\nconst message = deserialize(Message, {\n    message : \"Hello world\",\n    author  : 17,\n    comments: [\n        {\n            message: \"Welcome!\",\n            author : 23\n        }\n    ]\n});\n\nconst json = serialize(message);\n\nconsole.dir(message, {colors: true, depth: 10});\n```\n\n## Using decorators (optional)\n\nWith decorators (TypeScript or ESNext) building model schemas is even more trivial:\n\n```javascript\nimport {\n    createModelSchema, primitive, reference, list, object, identifier, serialize, deserialize, getDefaultModelSchema,\n    serializable\n} from \"serializr\";\n\n\nclass User {\n    @serializable(identifier())\n    uuid = Math.random();\n\n    @serializable\n    displayName = \"John Doe\";\n}\n\nclass Message {\n    @serializable\n    message = \"Test\";\n\n    @serializable(object(User))\n    author = null;\n\n    // Self referencing decorators work in Babel 5.x and Typescript. See below for more.\n    @serializable(list(object(Message)))\n    comments = [];\n}\n\n// You can now deserialize and serialize!\nconst message = deserialize(Message, {\n    message : \"Hello world\",\n    author  : {uuid: 1, displayName: \"Alice\"},\n    comments: [\n        {\n            message: \"Welcome!\",\n            author : {uuid: 1, displayName: \"Bob\"}\n        }\n    ]\n});\n\n\nconsole.dir(message, {colors: true, depth: 10});\n\n// We can call serialize without the first argument here\n//because the schema can be inferred from the decorated classes\n \nconst json = serialize(message);\n```\n\n**Decorator: Caveats**\n\nBabel 6.x does not allow decorators to self-reference during their creation, so the above code would not work for the Message class. Instead write:\n\n```javascript\nclass Message {\n    @serializable\n    message = \"Test\";\n\n    @serializable(object(User))\n    author = null;\n    \n    comments = [];\n    \n    constructor(){\n        getDefaultModelSchema(Message).props[\"comments\"] = list(object(Message));\n    }\n} \n```\n\n## Enabling decorators (optional)\n\n**TypeScript**\n\nEnable the compiler option `experimentalDecorators` in `tsconfig.json` or pass it as flag `--experimentalDecorators` to the compiler.\n\n**Babel 5.x**\n\n```json\n {\n   \"stage\": 1\n }\n```\n\n**Babel 6.x:**\n\nInstall support for decorators: `npm i --save-dev babel-plugin-transform-decorators-legacy`. And enable it in your `.babelrc` file:\n\n```json\n{\n    \"presets\": [\"es2015\", \"stage-1\"],\n    \"plugins\": [\"transform-decorators-legacy\"]\n}\n```\n\nProbably you have more plugins and presets in your `.babelrc` already, note that the order is important and `transform-decorators-legacy` should come as first.\n\n# Concepts\n\nThe two most important functions exposed by serializr are `serialize(modelschema?, object) -> json tree` and `deserialize(modelschema, json tree) -> object graph`.\nWhat are those model schemas?\n\n## ModelSchema\n\nThe driving concept behind (de)serialization is a ModelSchema.\nIt describes how model object instances can be (de)serialize to json.\n\nA simple model schema looks like this:\n\n```javascript\nconst todoSchema = {\n    factory: (context) => new Todo(),\n    extends: ModelSchema,\n    props: {\n        modelfield: PropSchema\n    }\n}\n```\n\nThe `factory` tells how to construct new instances during deserialization.\nThe optional `extends` property denotes that this model schema inherits its props from another model schema.\nThe props section describes how individual model properties are to be (de)serialized. Their names match the model field names.\nThe combination `fieldname: true` is simply a shorthand for `fieldname: primitive()`\n\nFor convenience, model schemas can be stored on the constructor function of a class.\nThis allows you to pass in a class reference wherever a model schema is required.\nSee the examples below.\n\n## PropSchema\n\nPropSchemas contain the strategy on how individual fields should be serialized.\nIt denotes whether a field is a primitive, list, whether it needs to be aliased, refers to other model objects etc.\nPropSchemas are composable. See the API section below for the details, but these are the built-in property schemas:\n\n-   `primitive()`: Serialize a field as primitive value\n-   `identifier()`: Serialize a field as primitive value, use it as identifier when serializing references (see `reference`)\n-   `date()`: Serializes dates (as epoch number)\n-   `alias(name, propSchema)`: Serializes a field under a different name\n-   `list(propSchema)`: Serializes an array based collection\n-   `map(propSchema)`: Serializes an Map or string key based collection\n-   `object(modelSchema)`: Serializes an child model element\n-   `reference(modelSchema, lookupFunction?)`: Serializes a reference to another model element\n-   `custom(serializeFunction, deserializeFunction)`: Create your own property serializer by providing two functions, one that converts modelValue to jsonValue, and one that does the inverse\n-   There is a special prop schema: `\"*\": true` that serializes all enumerable, non mentioned values as primitive\n\nIt is possible to define your own prop schemas. You can define your own propSchema by creating a function that returns an object with the following signature:\n\n```typings\n{\n    serializer: (sourcePropertyValue: any) => jsonValue,\n    deserializer: (jsonValue: any, callback: (err, targetPropertyValue: any) => void, context?, currentPropertyValue?) => void\n}\n```\n\nFor inspiration, take a look at the source code of the existing ones on how they work, it is pretty straightforward.\n\n## Deserialization context\n\nThe context object is an advanced feature and can be used to obtain additional context-related information about the deserialization process.\n`context` is available as:\n\n1.  first argument of factory functions\n2.  third argument of the lookup callback of `ref` prop schema's (see below)\n3.  third argument of the `deserializer` of a custom propSchema\n\nWhen deserializing a model elememt / property, the following fields are available on the context object:\n\n-   `json`: Returns the complete current json object that is being deserialized\n-   `target`: The object currently being deserialized. This is the object that is returned from the factory function.\n-   `parentContext`: Returns the parent context of the current context. For example if a child element is being deserialized, the `context.target` refers to the current model object, and `context.parentContext.target` refers to the parent model object that owns the current model object.\n-   `args`: If custom arguments were passed to the `deserialize` / `update` function, they are available as `context.args`.\n\n# API\n\n## ModelSchema\n\n[serializr.js:126-133](https://github.com/mobxjs/serializr/blob/58bf88786bb4ee088b3c267322134ec1f25aefd0/serializr.js#L126-L133 \"Source code on GitHub\")\n\nJSDOC type defintions for usage w/o typescript.\n\n**Parameters**\n\n-   `value` **Any** \n-   `targetClass`  \n-   `get` **([Function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function) \\| [undefined](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined))** \n-   `set` **([Function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function) \\| [undefined](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined))** \n-   `configurable` **[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean)** \n-   `enumerable` **[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean)** \n-   `sourcePropertyValue` **Any** \n-   `jsonValue` **Any** \n-   `callback` **cpsCallback** \n-   `context` **Context** \n-   `writeable` **[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean)** \n-   `id` **Any** \n-   `target` **[object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)** \n-   `context` **Context** \n-   `result` **Any** \n-   `error` **Any** \n-   `id` **[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)** \n-   `callback` **cpsCallback** \n-   `factory`  \n-   `props`  \n-   `currentPropertyValue` **Any** \n\n**Properties**\n\n-   `serializer` **serializerFunction** \n-   `deserializer` **deserializerFunction** \n-   `identifier` **[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean)** \n\nReturns **Any** any - serialized object\n\nReturns **Any** void\n\nReturns **Any** void\n\nReturns **Any** void\n\n## createSimpleSchema\n\n[serializr.js:126-133](https://github.com/mobxjs/serializr/blob/58bf88786bb4ee088b3c267322134ec1f25aefd0/serializr.js#L126-L133 \"Source code on GitHub\")\n\nCreates a model schema that (de)serializes from / to plain javascript objects.\nIts factory method is: `() => ({})`\n\n**Parameters**\n\n-   `props` **[object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)** property mapping,\n\n**Examples**\n\n```javascript\nvar todoSchema = createSimpleSchema({\n  title: true,\n  done: true\n});\n\nvar json = serialize(todoSchema, { title: \"Test\", done: false })\nvar todo = deserialize(todoSchema, json)\n```\n\nReturns **[object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)** model schema\n\n## createModelSchema\n\n[serializr.js:159-177](https://github.com/mobxjs/serializr/blob/58bf88786bb4ee088b3c267322134ec1f25aefd0/serializr.js#L159-L177 \"Source code on GitHub\")\n\nCreates a model schema that (de)serializes an object created by a constructor function (class).\nThe created model schema is associated by the targeted type as default model schema, see setDefaultModelSchema.\nIts factory method is `() => new clazz()` (unless overriden, see third arg).\n\n**Parameters**\n\n-   `clazz` **([constructor](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor) | class)** class or constructor function\n-   `props` **[object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)** property mapping\n-   `factory` **[function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function)** optional custom factory. Receives context as first arg\n\n**Examples**\n\n```javascript\nfunction Todo(title, done) {\n  this.title = title;\n  this.done = done;\n}\n\ncreateModelSchema(Todo, {\n  title: true,\n  done: true\n})\n\nvar json = serialize(new Todo(\"Test\", false))\nvar todo = deserialize(Todo, json)\n```\n\nReturns **[object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)** model schema\n\n## serializable\n\n[serializr.js:208-218](https://github.com/mobxjs/serializr/blob/58bf88786bb4ee088b3c267322134ec1f25aefd0/serializr.js#L208-L218 \"Source code on GitHub\")\n\nDecorator that defines a new property mapping on the default model schema for the class\nit is used in.\n\nWhen using typescript, the decorator can also be used on fields declared as constructor arguments (using the `private` / `protected` / `public` keywords).\nThe default factory will then invoke the constructor with the correct arguments as well.\n\n**Parameters**\n\n-   `arg1`  \n-   `arg2`  \n-   `arg3`  \n\n**Examples**\n\n```javascript\nclass Todo {\n```\n\nReturns **PropertyDescriptor** \n\n## getDefaultModelSchema\n\n[serializr.js:286-295](https://github.com/mobxjs/serializr/blob/58bf88786bb4ee088b3c267322134ec1f25aefd0/serializr.js#L286-L295 \"Source code on GitHub\")\n\nReturns the standard model schema associated with a class / constructor function\n\n**Parameters**\n\n-   `thing` **[object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)** \n\nReturns **[ModelSchema](#modelschema)** model schema\n\n## setDefaultModelSchema\n\n[serializr.js:309-312](https://github.com/mobxjs/serializr/blob/58bf88786bb4ee088b3c267322134ec1f25aefd0/serializr.js#L309-L312 \"Source code on GitHub\")\n\nSets the default model schema for class / constructor function.\nEverywhere where a model schema is required as argument, this class / constructor function\ncan be passed in as well (for example when using `object` or `ref`.\n\nWhen passing an instance of this class to `serialize`, it is not required to pass the model schema\nas first argument anymore, because the default schema will be inferred from the instance type.\n\n**Parameters**\n\n-   `clazz` **([constructor](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor) | class)** class or constructor function\n-   `modelSchema` **[ModelSchema](#modelschema)** a model schema\n\nReturns **[ModelSchema](#modelschema)** model schema\n\n## serialize\n\n[serializr.js:364-382](https://github.com/mobxjs/serializr/blob/58bf88786bb4ee088b3c267322134ec1f25aefd0/serializr.js#L364-L382 \"Source code on GitHub\")\n\nSerializes an object (graph) into json using the provided model schema.\nThe model schema can be omitted if the object type has a default model schema associated with it.\nIf a list of objects is provided, they should have an uniform type.\n\n**Parameters**\n\n-   `arg1`  modelschema to use. Optional\n-   `arg2`  object(s) to serialize\n\nReturns **[object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)** serialized representation of the object\n\n## deserialize\n\n[serializr.js:436-454](https://github.com/mobxjs/serializr/blob/58bf88786bb4ee088b3c267322134ec1f25aefd0/serializr.js#L436-L454 \"Source code on GitHub\")\n\nDeserializes a json structor into an object graph.\nThis process might be asynchronous (for example if there are references with an asynchronous\nlookup function). The function returns an object (or array of objects), but the returned object\nmight be incomplete until the callback has fired as well (which might happen immediately)\n\n**Parameters**\n\n-   `schema` **([object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) \\| [array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array))** to use for deserialization\n-   `json` **[json](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON)** data to deserialize\n-   `callback` **[function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function)** node style callback that is invoked once the deserializaiton has finished.\n    First argument is the optional error, second argument is the deserialized object (same as the return value)\n-   `customArgs` **Any** custom arguments that are available as `context.args` during the deserialization process. This can be used as dependency injection mechanism to pass in, for example, stores.\n\nReturns **([object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) \\| [array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array))** deserialized object, possibly incomplete.\n\n## update\n\n[serializr.js:620-641](https://github.com/mobxjs/serializr/blob/58bf88786bb4ee088b3c267322134ec1f25aefd0/serializr.js#L620-L641 \"Source code on GitHub\")\n\nSimilar to deserialize, but updates an existing object instance.\nProperties will always updated entirely, but properties not present in the json will be kept as is.\nFurther this method behaves similar to deserialize.\n\n**Parameters**\n\n-   `modelSchema` **[object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)** , optional if it can be inferred from the instance type\n-   `target` **[object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)** target instance to update\n-   `json` **[object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)** the json to deserialize\n-   `callback` **[function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function)** the callback to invoke once deserialization has completed.\n-   `customArgs` **Any** custom arguments that are available as `context.args` during the deserialization process. This can be used as dependency injection mechanism to pass in, for example, stores.\n\n## primitive\n\n[serializr.js:663-675](https://github.com/mobxjs/serializr/blob/58bf88786bb4ee088b3c267322134ec1f25aefd0/serializr.js#L663-L675 \"Source code on GitHub\")\n\nIndicates that this field contains a primitive value (or Date) which should be serialized literally to json.\n\n**Examples**\n\n```javascript\ncreateModelSchema(Todo, {\n  title: primitive()\n})\n\nconsole.dir(serialize(new Todo(\"test\")))\n// outputs: { title : \"test\" }\n```\n\nReturns **[ModelSchema](#modelschema)** \n\n## identifier\n\n[serializr.js:714-728](https://github.com/mobxjs/serializr/blob/58bf88786bb4ee088b3c267322134ec1f25aefd0/serializr.js#L714-L728 \"Source code on GitHub\")\n\nSimilar to primitive, but this field will be marked as the identifier for the given Model type.\nThis is used by for example `reference()` to serialize the reference\n\nIdentifier accepts an optional `registerFn` with the signature:\n`(id, target, context) => void`\nthat can be used to register this object in some store. note that not all fields of this object might\nhave been deserialized yet.\n\n**Parameters**\n\n-   `registerFn` **RegisterFunction** optional function to register this object during creation.\n\n**Examples**\n\n```javascript\nvar todos = {};\n\nvar s = _.createSimpleSchema({\n    id: _.identifier((id, object) => todos[id] = object),\n    title: true\n})\n\n_.deserialize(s, {\n    id: 1, title: \"test0\"\n})\n_.deserialize(s, [\n    { id: 2, title: \"test2\" },\n    { id: 1, title: \"test1\" }\n])\n\nt.deepEqual(todos, {\n    1: { id: 1, title: \"test1\" },\n    2: { id: 2, title: \"test2\" }\n})\n```\n\nReturns **PropSchema** \n\n## date\n\n[serializr.js:739-754](https://github.com/mobxjs/serializr/blob/58bf88786bb4ee088b3c267322134ec1f25aefd0/serializr.js#L739-L754 \"Source code on GitHub\")\n\nSimilar to primitive, serializes instances of Date objects\n\n## alias\n\n[serializr.js:773-784](https://github.com/mobxjs/serializr/blob/58bf88786bb4ee088b3c267322134ec1f25aefd0/serializr.js#L773-L784 \"Source code on GitHub\")\n\nAlias indicates that this model property should be named differently in the generated json.\nAlias should be the outermost propschema.\n\n**Parameters**\n\n-   `name` **[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)** name of the json field to be used for this property\n-   `propSchema` **PropSchema** propSchema to (de)serialize the contents of this field\n\n**Examples**\n\n```javascript\ncreateModelSchema(Todo, {\n  title: alias(\"task\", primitive())\n})\n\nconsole.dir(serialize(new Todo(\"test\")))\n// { task : \"test\" }\n```\n\nReturns **PropSchema** \n\n## custom\n\n[serializr.js:803-812](https://github.com/mobxjs/serializr/blob/58bf88786bb4ee088b3c267322134ec1f25aefd0/serializr.js#L803-L812 \"Source code on GitHub\")\n\nCan be used to create simple custom propSchema.\n\n**Parameters**\n\n-   `serializer` **[function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function)** function that takes a model value and turns it into a json value\n-   `deserializer` **[function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function)** function that takes a json value and turns it into a model value\n\n**Examples**\n\n```javascript\nvar schema = _.createSimpleSchema({\n  a: _.custom(\n    function(v) { return v + 2 },\n    function(v) { return v - 2 }\n  )\n})\nt.deepEqual(_.serialize(s, { a: 4 }), { a: 6 })\nt.deepEqual(_.deserialize(s, { a: 6 }), { a: 4 })\n```\n\nReturns **PropSchema** \n\n## object\n\n[serializr.js:843-861](https://github.com/mobxjs/serializr/blob/58bf88786bb4ee088b3c267322134ec1f25aefd0/serializr.js#L843-L861 \"Source code on GitHub\")\n\n`object` indicates that this property contains an object that needs to be (de)serialized\nusing its own model schema.\n\nN.B. mind issues with circular dependencies when importing model schema's from other files! The module resolve algorithm might expose classes before `createModelSchema` is executed for the target class.\n\n**Parameters**\n\n-   `modelSchema` **[ModelSchema](#modelschema)** to be used to (de)serialize the object\n\n**Examples**\n\n```javascript\nclass SubTask{}\nclass Todo{}\n\ncreateModelSchema(SubTask, {\n  title: true\n});\ncreateModelSchema(Todo, {\n  title: true,\n  subTask: object(SubTask)\n});\n\nconst todo = deserialize(Todo, {\n  title: \"Task\",\n  subTask: {\n    title: \"Sub task\"\n  }\n});\n```\n\nReturns **PropSchema** \n\n## reference\n\n[serializr.js:920-953](https://github.com/mobxjs/serializr/blob/58bf88786bb4ee088b3c267322134ec1f25aefd0/serializr.js#L920-L953 \"Source code on GitHub\")\n\n`reference` can be used to (de)serialize references that point to other models.\n\nThe first parameter should be either a ModelSchema that has an `identifier()` property (see identifier)\nor a string that represents which attribute in the target object represents the identifier of the object.\n\nThe second parameter is a lookup function that is invoked during deserialization to resolve an identifier to\nan object. Its signature should be as follows:\n\n`lookupFunction(identifier, callback, context)` where:\n\n1.  `identifier` is the identifier being resolved\n2.  `callback` is a node style calblack function to be invoked with the found object (as second arg) or an error (first arg)\n3.  `context` see context.\n\nThe lookupFunction is optional. If it is not provided, it will try to find an object of the expected type and required identifier within the same JSON document\n\nN.B. mind issues with circular dependencies when importing model schemas from other files! The module resolve algorithm might expose classes before `createModelSchema` is executed for the target class.\n\n**Parameters**\n\n-   `target`  : ModelSchema or string\n-   `lookupFn` **RefLookupFunction** function\n\n**Examples**\n\n```javascript\nclass User{}\nclass Post{}\n\ncreateModelSchema(User, {\n  uuid: identifier(),\n  displayname: primitive()\n})\n\ncreateModelSchema(Post, {\n  author: reference(User, findUserById),\n  message: primitive()\n})\n\nfunction findUserById(uuid, callback) {\n  fetch(\"http://host/user/\" + uuid)\n    .then((userData) => {\n      deserialize(User, userData, callback)\n    })\n    .catch(callback)\n}\n\ndeserialize(\n  Post,\n  {\n    message: \"Hello World\",\n    author: 234\n  },\n  (err, post) => {\n    console.log(post)\n  }\n)\n```\n\nReturns **PropSchema** \n\n## list\n\n[serializr.js:990-1011](https://github.com/mobxjs/serializr/blob/58bf88786bb4ee088b3c267322134ec1f25aefd0/serializr.js#L990-L1011 \"Source code on GitHub\")\n\nList indicates that this property contains a list of things.\nAccepts a sub model schema to serialize the contents\n\n**Parameters**\n\n-   `propSchema` **PropSchema** to be used to (de)serialize the contents of the array\n\n**Examples**\n\n```javascript\nclass SubTask{}\nclass Task{}\nclass Todo{}\n\ncreateModelSchema(SubTask, {\n  title: true\n})\ncreateModelSchema(Todo, {\n  title: true,\n  subTask: list(object(SubTask))\n})\n\nconst todo = deserialize(Todo, {\n  title: \"Task\",\n  subTask: [{\n    title: \"Sub task 1\"\n  }]\n})\n```\n\nReturns **PropSchema** \n\n## map\n\n[serializr.js:1025-1074](https://github.com/mobxjs/serializr/blob/58bf88786bb4ee088b3c267322134ec1f25aefd0/serializr.js#L1025-L1074 \"Source code on GitHub\")\n\nSimilar to list, but map represents a string keyed dynamic collection.\nThis can be both plain objects (default) or ES6 Map like structures.\nThis will be inferred from the initial value of the targetted attribute.\n\n**Parameters**\n\n-   `propSchema` **Any** \n\n# Recipes and examples\n\n## 1. Plain schema with plain objects\n\n```javascript\nconst todoSchema = {\n    factory: () => {},\n    props: {\n        task: primitive(),\n        owner: reference(\"_userId\", UserStore.findUserById) // attribute of the owner attribute of  a todo + lookup function\n        subTasks: alias(\"children\", list(object(todoSchema)))\n    }\n}\n\nconst todo = deserialize(todoSchema,\n    { task: \"grab coffee\", owner: 17, children: [] },\n    (err, todo) => { console.log(\"finished loading todos\") }\n);\n\nconst todoJson = serialize(todoSchema, todo)\n```\n\n## 2. Create schema and store it on constructor\n\n```javascript\nfunction Todo(parentTodo) {\n    this.parent = parentTodo; // available in subTasks\n}\n\nconst todoSchema = {\n    factory: (context) => new Todo(context.parent),\n    props: {\n        task: primitive(),\n        owner: reference(\"_userId\", UserStore.findUserById) // attribute of the owner attribute of  a todo + lookup function\n        subTasks: alias(\"children\", list(object(todoSchema)))\n    }\n}\nsetDefaultModelSchema(Todo, todoSchema)\n\nconst todo = deserialize(Todo, // just pass the constructor name, schema will be picked up\n    { task: \"grab coffee\", owner: 17, children: [] },\n    (err, todos) => { console.log(\"finished loading todos\") }\n);\n\nconst todoJson = serialize(todo) // no need to pass schema explicitly\n```\n\n## 3. Create schema for simple argumentless constructors\n\n```javascript\nfunction Todo() {\n\n}\n\n// creates a default factory, () => new Todo(), stores the schema as default model schema\ncreateModelSchema(Todo, {\n    task: primitive()\n})\n\nconst todo = deserialize(Todo, // just pass the constructor name, schema will be picked up\n    { task: \"grab coffee\", owner: 17, children: [] },\n    (err, todos) => { console.log(\"finished loading todos\") }\n);\n\nconst todoJson = serialize(todo) // no need to pass schema explicitly\n```\n\n## 4. Create schema for simple argumentless constructors using decorators\n\n```javascript\nclass Todo {\n    @serializable(primitive())\n    task = \"Grab coffee\";\n\n    @serializable(reference(\"_userId\", UserStore.findUserById))\n    owner = null;\n\n    @serializable(alias(\"children\", list(object(todoSchema)))\n    subTasks = [];\n}\n\n// note that (de)serialize also accepts lists\nconst todos = deserialize(Todo,\n    [{\n        task: \"grab coffee\", owner: 17, children: []\n    }],\n    (err, todos) => { console.log(\"finished loading todos\") }\n);\n\nconst todoJson = serialize(todos)\n```\n\n## 5. use custom factory methods to reuse model object instances\n\n```javascript\nconst someTodoStoreById = {}\n\ngetDefaultModelSchema(Todo).factory = (context, json) => {\n  if (someTodoStoreById[json.id])\n    return someTodoStoreById[json.id] // reuse instance\n  return someTodoStoreById[json.id] = new Todo()\n};\n```\n\n## 6. use custom arguments to inject stores to models\n\nThis pattern is useful to avoid singletons but allow to pass context specific data to constructors. This can be done by passing custom data to `deserialize` / `update` as last argument,\nwhich will be available as `context.args` on all places where context is available:\n\n```javascript\nclass User {\n    constructor(someStore) {\n        // User needs access to someStore, for whatever reason\n    }\n}\n\n// create model schema with custom factory\ncreateModelSchema(User, { username: true }, context => {\n    return new User(context.args.someStore)\n})\n\n// don't want singletons!\nconst someStore = new SomeStore()\n// provide somestore through context of the deserialization process\nconst user = deserialize(\n    User,\n    someJson,\n    (err, user) => { console.log(\"done\") },\n    {\n        someStore: someStore\n    }\n)\n```\n\n## 7. Putting it together: MobX store with plain objects, classes and internal references\n\n```javascript\n// models.js:\nimport {observable, computed} from 'mobx';\nimport {serializable, identifier} from 'serializr';\n\nfunction randomId() {\n    return Math.floor(Math.random()*100000);\n}\n\nexport class Box {\n    @serializable(identifier()) id = randomId();\n    @serializable @observable x = 0;\n    @serializable @observable y = 0;\n    @serializable @observable location = 0;\n    \n    constructor(location, x, y){\n        this.location = location;\n        this.x = x;\n        this.y = y;\n    }\n    \n    @serializable @computed get area() {\n        return this.x * this.y;\n    }\n}\n\nexport class Arrow{\n    @serializable(identifier()) id = randomId();\n    @serializable(reference(Box)) from;\n    @serializable(reference(Box)) to;\n}\n\n// store.js:\nimport {observable, transaction} from 'mobx';\nimport {createSimpleSchema, identifier, list, serialize, deserialize, update} from 'serializr';\nimport {Box, Arrow} from './models';\n\n// The store that holds our domain: boxes and arrows\nconst store = observable({\n    boxes: [],\n    arrows: [],\n    selection: null\n});\n\n// Model of the store itself\nconst storeModel = createSimpleSchema({\n    boxes: list(object(Box)),\n    arrows: list(object(Arrow)),\n    selection: reference(Box)\n});\n\n// Example Data\n// You can push data in as a class\nstore.boxes.push(\n    new Box('Rotterdam', 100, 100),\n    new Box('Vienna', 650, 300)\n);\n\n// Or it can be an raw javascript object with the right properties\nstore.arrows.push({\n    id: randomId(),\n    from: store.boxes[0],\n    to: store.boxes[1]\n});\n\n// (de) serialize functions\nfunction serializeState(store) {\n    return serialize(storeModel, store);\n}\n\nfunction deserializeState(store, json) {\n    transaction(() => {\n        update(storeModel, store, json);\n    })\n}\n\n// Print ... out for debugging\nconsole.dir(serializeState(store), {depth: 10, colors: true});\n```\n\n* * *\n\n# Future ideas\n\n-   [ ] If MobX, optimize by leveraging createTransformer and transactions\n-   [ ] Support async serialization (future)\n-   [ ] Support ImmutableJS out of the box\n-   [ ] Make `\"*\": true` respect extends clauses\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/mobxjs/serializr.git"
  },
  "scripts": {
    "build-docs": "documentation readme serializr.js --github --section API",
    "build-test": "npm run build-test-babel && npm run build-test-ts",
    "build-test-babel": "babel test/babel/babel.js -o test/babel/babel-compiled.js",
    "build-test-ts": "tsc -p test/typescript",
    "coverage": "npm run build-test && istanbul cover tape test/*.js",
    "lint": "eslint serializr.js",
    "prepublish": "npm run small-build && npm run build-docs",
    "small-build": "uglifyjs -m sort,toplevel -c --screw-ie8 --preamble '/** serializr - (c) Michel Weststrate 2016 - MIT Licensed */' --source-map serializr.min.js.map -o serializr.min.js serializr.js",
    "test": "npm run build-test && node test/index"
  },
  "typings": "serializr.d.ts",
  "version": "1.1.10"
}
